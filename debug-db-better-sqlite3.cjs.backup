const Database = require('better-sqlite3');
const path = require('path');
const os = require('os');

try {
  // Production database path
  const dbPath = path.join(os.homedir(), 'AppData', 'Roaming', 'rawalite', 'database', 'rawalite.db');
  console.log('üìç Database path:', dbPath);
  
  const db = new Database(dbPath);

  console.log('=== Migration Status Check ===');
  const migrations = db.prepare("SELECT name FROM sqlite_master WHERE type='table' AND name='migrations'").all();
  if (migrations.length > 0) {
    console.log('Migrations table exists');
    const applied = db.prepare('SELECT * FROM migrations ORDER BY id').all();
    console.log('Applied migrations:', applied.map(m => m.filename));
  } else {
    console.log('No migrations table found!');
  }

  console.log('\n=== Numbering Circles Check ===');
  const circles = db.prepare('SELECT * FROM numbering_circles').all();
  console.log('Found numbering circles:', circles.length);
  console.log('Sample circle:', circles[0]); // Debug: show full circle structure
  circles.forEach(c => console.log('  -', c.id || c.type, ':', c.current || c.last_number, `(${c.name || 'unnamed'})`));

  console.log('\n=== Settings Check ===');
  const settings = db.prepare('SELECT * FROM settings').all();
  console.log('Found settings:', settings.length);
  if (settings.length > 0) {
    console.log('Settings sample:', Object.keys(settings[0])); // Show available fields
  }

  console.log('\n=== Tables Check ===');
  const tables = db.prepare("SELECT name FROM sqlite_master WHERE type='table' ORDER BY name").all();
  console.log('Available tables:', tables.map(t => t.name).join(', '));

  console.log('\n=== Schema Version ===');
  const version = db.pragma('user_version', { simple: true });
  console.log('Database schema version:', version);

  db.close();
  console.log('\n‚úÖ Database check completed');
} catch (error) {
  console.error('‚ùå Database error:', error.message);
}