# CRITICAL KI-FAILURE-MODES

> **‚ö†Ô∏è MANDATORY READ vor jeder Session - Diese Fehler NIEMALS wiederholen**  
> **Schema:** `[STATUS-PR√ÑFIX]_[TYP]-[SUBJECT]-[SPECIFIER]_YYYY-MM-DD.md`

## üìã **SCHEMA-√úBERSICHT**

### **Naming Convention:**
```
[STATUS-PR√ÑFIX]_[TYP]-[SUBJECT]-[SPECIFIER]_YYYY-MM-DD.md

Beispiel: VALIDATED_GUIDE-KI-FAILURE-MODES-2025-10-15.md
```

### **STATUS-PR√ÑFIXE:**
- `VALIDATED_` - Validierte, stabile Dokumentation (verl√§ssliche Quelle)
- `SOLVED_` - Gel√∂ste Probleme und Fixes (fertige L√∂sung)
- `LESSON_` - Lessons Learned und Debugging (vergleichende Analyse)
- `WIP_` - Work in Progress (nur Orientierung)
- `COMPLETED_` - Abgeschlossene Implementierungen (fertige Reports)
- `PLAN_` - Planungsdokumente und Roadmaps (Entwurfsstatus)
- `DEPRECATED_` - Veraltete, ersetzte Dokumentation (ignorieren)

### **TYP-KATEGORIEN:**
- `GUIDE-` - Leitf√§den, Anleitungen (wie diese Datei)
- `FIX-` - Lessons Learned, Debugging, Fixes, Problems
- `IMPL-` - Implementierungen, Features
- `REPORT-` - Berichte, Analysen, Completion-Reports
- `REGISTRY-` - Listen, Registries, Collections
- `TEMPLATE-` - Vorlagen, Templates
- `TRACKING-` - Status-Tracking, Quality-Tracking
- `PLAN-` - Planungsdokumente, Roadmaps

---

## üö® KRITISCHE PLANUNGSFEHLER - VERHINDERN

### **1. Scope Misunderstanding (Session-Killer)**
```
‚ùå FEHLER: Aufgabe zu eng interpretieren
‚úÖ RICHTIG: Vollst√§ndige Dokumentation lesen BEVOR Plan erstellen
```
- **Beispiel**: "bei invoices und offers mitpr√ºfen" = vollst√§ndige Schema-Konsistenz, nicht nur Package
- **Prevention**: Immer `docs/05-database/final/` und verwandte Pl√§ne pr√ºfen
- **NEVER**: Plan ohne Dokumentations-Review erstellen

### **2. Root-Cause vs. Symptom Fix**
```
‚ùå FEHLER: Symptom beheben (mappedItem.amount ‚Üí mappedItem.unit_price)
‚úÖ RICHTIG: Root-Cause beheben (field-mapper.ts 'amount': 'unit_price' fehlt)
```
- **Prevention**: Field-Mapper Vollst√§ndigkeit IMMER vor DB-Fixes pr√ºfen
- **NEVER**: Direkte Code-Fixes ohne Architektur-Analyse

### **3. Dokumentations-Ignorierung**
```
‚ùå FEHLER: Bestehende Analysen √ºbersehen (FIELD_MAPPER_MISMATCHES_PLAN.md)
‚úÖ RICHTIG: docs/ durchsuchen nach verwandten Problemen
```
- **MUST**: `semantic_search` nach Problem-Keywords
- **NEVER**: Neue Analyse ohne Check auf bestehende Dokumentation

### **4. Lessons-Learned Missachtung (H√ÑUFIGER FEHLER)**
```
‚ùå FEHLER: Immer wieder vergessen, Lessons zu erstellen/nutzen
‚úÖ RICHTIG: VORRANGIG vorhandene Lessons konsultieren und erweitern
```
- **MUST**: `docs/*/lessons/` pr√ºfen BEVOR neue Analyse beginnen
- **MUST**: Nach jedem Problem/Fix entsprechende Lesson erstellen/erweitern
- **PATTERN**: Problem X ‚Üí docs/08-ui/lessons/LESSONS-LEARNED-X.md suchen
- **NEVER**: Debugging ohne Lessons-Check/Update-Workflow

### **5. Unvollst√§ndige Feature-Implementierung (KRITISCHER SCOPE-FEHLER)**
```
‚ùå FEHLER: Feature nur f√ºr Offers/Invoices implementieren, Packages "deferrieren"
‚úÖ RICHTIG: Vollst√§ndige Cross-Entity-Analyse VOR Entscheidung √ºber Scope
```
- **Real-Case**: `priceDisplayMode` nur f√ºr Offers/Invoices implementiert, Packages ausgelassen
- **Warum kritisch**: Package‚ÜíOffer Import √ºbertr√§gt `priceDisplayMode` - fehlende Package-Unterst√ºtzung = Feature funktioniert NICHT
- **Prevention**: 
  - Bei Entity-Features IMMER fragen: "Werden diese Entities miteinander verkn√ºpft?"
  - Package‚ÜíOffer/Invoice Import = Package MUSS alle Offer/Invoice-Felder unterst√ºtzen
  - **NEVER**: "sp√§ter implementieren" bei kritischen Abh√§ngigkeiten
  - **MUST**: Datenfluss-Analyse BEVOR Scope-Entscheidung (UI ‚Üí DB ‚Üí Import ‚Üí PDF)
- **Regel**: Wenn Feature f√ºr Entity A implementiert wird UND Entity B importiert A ‚Üí Feature MUSS auch f√ºr B implementiert werden
- **NEVER**: KI entscheidet √ºber Deferral - IMMER Entwickler fragen bei Scope-Unsicherheit

## üîß IMPLEMENTIERUNGSFEHLER - VERHINDERN

### **6. Environment-Detection falsch**
```
‚ùå FEHLER: process.env.NODE_ENV in Electron
‚úÖ RICHTIG: !app.isPackaged (Electron-Standard laut Doku)
```
- **MUST**: Dev-Prod-Patterns aus docs/00-meta/ konsultieren
- **NEVER**: Node.js-Patterns blind auf Electron √ºbertragen

### **7. Unvollst√§ndige Systematik**
```
‚ùå FEHLER: 50% console.log ersetzt, dann gestoppt
‚úÖ RICHTIG: grep_search ‚Üí vollst√§ndige Liste ‚Üí systematisch abarbeiten
```
- **MUST**: Vollst√§ndigkeit vor Abschluss validieren
- **NEVER**: Refactoring-Tasks unvollst√§ndig lassen

### **8. Missing Validation**
```
‚ùå FEHLER: Keine finale Verifikation der √Ñnderungen
‚úÖ RICHTIG: Tests/Build nach jedem gr√∂√üeren Fix
```
- **MUST**: Critical-Fixes-Registry pr√ºfen vor File-Edit
- **NEVER**: √Ñnderungen ohne Validation abschlie√üen

## üìã MANDATORY WORKFLOW - JEDE SESSION

### **Pre-Implementation Checklist**
1. **üìö Dokumentation**: `semantic_search` nach Problem + verwandten Themen
2. **üìñ Lessons Check**: `docs/*/lessons/` nach √§hnlichen Problemen durchsuchen
3. **üîç Existing Analysis**: `docs/*/final/` und `docs/*/solved/` pr√ºfen
4. **‚ö†Ô∏è Critical Check**: `CRITICAL-FIXES-REGISTRY.md` f√ºr betroffene Dateien
5. **üèóÔ∏è Architecture**: Field-Mapper, Schema, IPC-Patterns verstehen
6. **üìã Full Scope**: Vollst√§ndigen Umfang definieren (nicht nur erstes Problem)
7. **üîó Data Flow Analysis**: Bei Entity-Features IMMER Import/Export-Beziehungen pr√ºfen

### **Implementation Rules**
- **ELECTRON-spezifisch**: `app.isPackaged` f√ºr Environment-Detection
- **FIELD-MAPPING**: Immer `field-mapper.ts` vor SQLiteAdapter fixes
- **SQL-QUERIES**: `convertSQLQuery()` verwenden, nie hardcoded snake_case
- **LOGGING**: `devLog()` mit Environment-Detection
- **PATHS**: Nur √ºber `src/lib/paths.ts`, nie direkter `app.getPath()`

### **Post-Implementation Validation**
1. **‚úÖ Completeness**: grep_search best√§tigt alle Vorkommen behoben
2. **‚úÖ Build**: `pnpm build` erfolgreich
3. **‚úÖ Critical**: `pnpm validate:critical-fixes` gr√ºn
4. **‚úÖ Tests**: Funktionale Tests der ge√§nderten Features
5. **üìñ Lessons Update**: Problem/L√∂sung in entsprechender Lessons-Datei dokumentiert

## üéØ SESSION-ERFOLG KRITERIEN

- **Vollst√§ndigkeit**: 100% des definierten Scope implementiert
- **Systematik**: Alle verwandten Probleme identifiziert und behoben
- **Validation**: Build + Tests + Critical-Fixes best√§tigt
- **Dokumentation**: Relevante Docs konsultiert und ber√ºcksichtigt
- **Architektur**: Patterns korrekt befolgt (Field-Mapping, Environment-Detection, etc.)

---

**‚ö†Ô∏è Bei Zweifel: STOPP und Entwickler fragen, bevor improvisieren**

---

## üìã Zus√§tzliche KI-Navigation-Regeln

**Pr√§fix-Erkennungs-System:** Siehe [VALIDATED-2025-10-15_KI-PREFIX-RECOGNITION-RULES.md](./VALIDATED-2025-10-15_KI-PREFIX-RECOGNITION-RULES.md)
- **VALIDATED-** und **SOLVED-** Dokumente bevorzugen
- **WIP_** und **PLAN_** nur zur Orientierung  
- **DEPRECATED-** aktiv ignorieren