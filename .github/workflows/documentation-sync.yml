name: üìã Documentation Sync Check

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  documentation-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v40
      with:
        files: |
          src/**
          electron/**
        files_ignore: |
          **/*.test.ts
          **/*.spec.ts
          
    - name: Check for documentation updates
      if: steps.changed-files.outputs.any_changed == 'true'
      env:
        CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
      run: |
        echo "Source code files changed:"
        echo "$CHANGED_FILES"
        
        # Check if docs were also updated
        DOC_CHANGES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -E "(docs/|README\.md|PROJECT_OVERVIEW\.md)" || true)
        
        # Check for API/interface changes that definitely need docs
        API_CHANGES=$(echo "$CHANGED_FILES" | grep -E "(persistence/adapter\.ts|lib/.*\.ts|types/.*\.ts)" || true)
        
        if [[ -n "$API_CHANGES" && -z "$DOC_CHANGES" ]]; then
          echo "üö® API/Interface changes detected but no documentation updates found."
          echo "Changed API files: $API_CHANGES"
          echo ""
          echo "Please consider updating:"
          echo "- docs/standards.md (if coding patterns changed)"
          echo "- docs/debugging.md (if error handling changed)"
          echo "- docs/ARCHITEKTUR.md (if architecture changed)"
          echo "- PROJECT_OVERVIEW.md (if features/structure changed)"
          echo "- JSDoc comments for public APIs"
          echo ""
          echo "If no documentation changes are needed, add a comment in the PR explaining why."
          exit 1
        fi
        
        if [[ -n "$CHANGED_FILES" && -z "$DOC_CHANGES" ]]; then
          echo "‚ö†Ô∏è Source code changed but no documentation updates detected."
          echo "Please verify if documentation needs updating:"
          echo ""
          echo "Changed source files:"
          echo "$CHANGED_FILES"
          echo ""
          echo "Consider updating relevant documentation if:"
          echo "- New features were added"
          echo "- APIs changed"
          echo "- Architecture modified"
          echo "- New dependencies added"
          echo "- Configuration changed"
        fi
        
    - name: Validate commit message format
      run: |
        # Get PR title and check format
        PR_TITLE="${{ github.event.pull_request.title }}"
        
        if ! echo "$PR_TITLE" | grep -qE "^(feat|fix|docs|style|refactor|perf|test|chore)(\(.+\))?: .+"; then
          echo "üö® PR title doesn't follow conventional format:"
          echo "Current: $PR_TITLE"
          echo ""
          echo "Expected format: type(scope): description"
          echo "Examples:"
          echo "- feat(customers): add email validation"
          echo "- fix(db): resolve transaction deadlock"
          echo "- docs(api): update persistence adapter documentation"
          exit 1
        fi
        
    - name: Check for required PR sections
      run: |
        PR_BODY="${{ github.event.pull_request.body }}"
        
        # Check if documentation section is filled out
        if echo "$PR_BODY" | grep -q "## üìö \*\*Documentation\*\*" && echo "$PR_BODY" | grep -q "No documentation changes needed"; then
          echo "‚úÖ Documentation section acknowledged"
        elif echo "$PR_BODY" | grep -q "docs/ files updated"; then
          echo "‚úÖ Documentation updates mentioned"
        else
          echo "‚ö†Ô∏è Please fill out the Documentation section in the PR template"
        fi
        
        # Check if testing section is filled out
        if ! echo "$PR_BODY" | grep -q "Test Results"; then
          echo "‚ö†Ô∏è Please provide test results in the PR description"
        fi