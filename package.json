{
  "name": "rawalite",
  "version": "1.0.0",
  "private": true,
  "type": "module",
  "engines": {
    "node": ">=20"
  },
  "main": "dist-electron/main.cjs",
  "scripts": {
    "clean": "node -e \"const fs=require('fs');const p=['dist','build','.vite','node_modules/.vite','.cache','out','.tsbuildinfo'];p.forEach(d=>{try{if(fs.existsSync(d)){fs.rmSync(d,{recursive:true,force:true})}}catch(e){console.warn('Skipped locked:',d)}});\"",
    "build:clean": "pnpm clean && pnpm build",
    "dev": "pnpm run vite & pnpm run electron:dev",
    "vite": "vite",
    "electron:dev": "pnpm run build:preload && pnpm run build:main && electron dist-electron/main.cjs",
    "build": "vite build && pnpm run build:preload && pnpm run build:main",
    "build:preload": "esbuild electron/preload.ts --bundle --platform=node --external:electron --outfile=dist-electron/preload.js",
    "build:main": "esbuild electron/main.ts --bundle --platform=node --format=cjs --external:electron --outfile=dist-electron/main.cjs",
    "typecheck": "tsc --noEmit",
    "lint": "eslint .",
    "test": "vitest",
    "e2e": "@playwright/test",
    "dist": "pnpm run build && electron-builder",
    "postinstall": "node -e \"require('fs').mkdirSync('public',{recursive:true});require('fs').cpSync(require.resolve('sql.js/dist/sql-wasm.wasm'),'public/sql-wasm.wasm',{force:true})\"",
    "guard:cjs": "node -e \"const fs=require('fs');const path=require('path');let bad=[];function scan(d,p=''){if(['node_modules','dist','build','.vite','out','.git','release'].some(x=>d.includes(x)))return;for(const f of fs.readdirSync(d)){const fp=path.join(d,f);const rp=path.posix.join(p,f);if(fs.statSync(fp).isFile()&&(fp.endsWith('.js')||fp.endsWith('.ts'))&&!fp.endsWith('.json')){const c=fs.readFileSync(fp,'utf8');if(/\\brequire\\(|module\\.exports\\b|exports\\.(\\w+)\\b/.test(c))bad.push(rp)}else if(fs.statSync(fp).isDirectory())scan(fp,rp)}}scan('.');if(bad.length){console.error('❌ CommonJS patterns in source:',bad);process.exit(1)}console.log('✅ No CommonJS in source files');\"",
    "guard:pkgtype": "node -e \"const fs=require('fs');const path=require('path');let bad=[];function scan(d){if(d.includes('node_modules')) return; for(const f of fs.readdirSync(d)){const p=path.join(d,f);if(fs.statSync(p).isDirectory()){const pj=path.join(p,'package.json');if(fs.existsSync(pj)){const j=JSON.parse(fs.readFileSync(pj,'utf8'));if(j.type==='commonjs') bad.push(p)} scan(p)}}} scan('.'); if(bad.length){console.error('❌ commonjs packages:',bad);process.exit(1)} console.log('✅ type=module überall');\"",
    "guard:assets": "node -e \"const fs=require('fs');const p='dist/index.html';if(fs.existsSync(p)){const c=fs.readFileSync(p,'utf8');if(c.includes('/assets/')){console.error('❌ Absolute assets found in dist/index.html');process.exit(1)}} console.log('✅ Relative assets OK');\"",
    "precommit": "pnpm typecheck && pnpm lint && pnpm guard:assets && pnpm guard:cjs && pnpm guard:pkgtype",
    "sync-version": "tsx scripts/sync-version.ts",
    "version:report": "tsx scripts/sync-version.ts report",
    "version:check": "tsx scripts/sync-version.ts scan"
  },
  "dependencies": {
    "@types/jszip": "^3.4.1",
    "dexie": "^4.0.8",
    "html2canvas": "^1.4.1",
    "jspdf": "^3.0.2",
    "jszip": "^3.10.1",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^7.8.2",
    "sql.js": "^1.13.0"
  },
  "devDependencies": {
    "@playwright/test": "^1.46.0",
    "@types/node": "^20.14.10",
    "@types/react": "^18.3.7",
    "@types/react-dom": "^18.3.0",
    "@types/sql.js": "^1.4.9",
    "@typescript-eslint/eslint-plugin": "^8.43.0",
    "@typescript-eslint/parser": "^8.43.0",
    "@vitejs/plugin-react": "^5.0.2",
    "electron": "^31.2.0",
    "electron-builder": "^24.13.3",
    "esbuild": "^0.21.5",
    "eslint": "^9.9.0",
    "npm-run-all": "^4.1.5",
    "tsx": "^4.20.5",
    "typescript": "^5.5.4",
    "vite": "^5.4.0",
    "vitest": "^1.6.0"
  }
}
