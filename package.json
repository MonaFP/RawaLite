{
  "name": "rawalite",
  "version": "1.0.20",
  "description": "Rechnungs- und Angebotsverwaltung Lite",
  "author": "MonaFP",
  "private": true,
  "type": "module",
  "engines": {
    "node": ">=20"
  },
  "main": "dist-electron/main.cjs",
  "scripts": {
    "postinstall": "node scripts/sync-npmrc.cjs && node scripts/rebuild-native-electron.cjs",
    "preinstall": "node scripts/check-electron-abi.cjs || true",
    "prerebuild": "node scripts/sync-npmrc.cjs && node scripts/rebuild-native-electron.cjs",
    "rebuild:electron": "node scripts/rebuild-native-electron.cjs",
    "clean": "node -e \"const fs=require('fs');const p=['dist','build','.vite','node_modules/.vite','.cache','out','.tsbuildinfo'];p.forEach(d=>{try{if(fs.existsSync(d)){fs.rmSync(d,{recursive:true,force:true})}}catch(e){console.warn('Skipped locked:',d)}});\"",
    "clean:release": "node -e \"const fs=require('fs');try{if(fs.existsSync('release')){fs.rmSync('release',{recursive:true,force:true});console.log('✅ Removed release/')}}catch(e){console.warn('⚠️ Release cleanup failed:',e.message)}\"",
    "clean:release:force": "node -e \"const fs=require('fs');const path=require('path');function forceRemove(p){try{if(fs.existsSync(p)){const stat=fs.lstatSync(p);if(stat.isDirectory()){fs.readdirSync(p).forEach(f=>forceRemove(path.join(p,f)));fs.rmdirSync(p)}else{fs.unlinkSync(p)}}}catch(e){}}forceRemove('release');console.log('✅ Force removed release/')\"",
    "clean:processes": "scripts\\clean-processes.cmd",
    "clean:vscode-safe": "powershell -ExecutionPolicy Bypass -File scripts/vscode-safe-cleanup-simple.ps1",
    "clean:advanced": "node scripts/build-cleaner.cjs",
    "clean:force": "powershell -ExecutionPolicy Bypass -File scripts/build-cleanup.ps1",
    "clean:full": "pnpm clean:processes || echo Process cleanup done && pnpm clean && pnpm clean:release",
    "build:clean": "pnpm clean && pnpm rebuild:electron && pnpm build",
    "build:safe": "pnpm clean:full && pnpm rebuild:electron && pnpm build",
    "build:vscode-safe": "node scripts/vscode-safe-build.cjs",
    "dist:safe": "pnpm clean:release:force && pnpm run build && electron-builder",
    "dist:vscode-safe": "node scripts/vscode-safe-build.cjs",
    "dist:retry": "pnpm dist || (echo Retrying in 2 seconds... && timeout /t 2 /nobreak >nul && pnpm dist)",
    "dev": "node scripts/force-dev-all.cjs",
    "predev:electron": "node scripts/rebuild-native-electron.cjs",
    "dev:all": "pnpm run predev:electron && node scripts/dev-starter.cjs",
    "dev:manual": "echo 'Terminal 1: pnpm run vite' && echo 'Terminal 2: pnpm run electron:dev'",
    "vite": "vite",
    "preelectron:dev": "node scripts/abi-guard.cjs",
    "electron:dev": "pnpm run build:preload && pnpm run build:main && electron dist-electron/main.cjs",
    "prebuild": "node scripts/abi-guard.cjs",
    "build": "vite build && pnpm run build:preload && pnpm run build:main",
    "build:preload": "esbuild electron/preload.ts --bundle --platform=node --external:electron --outfile=dist-electron/preload.js",
    "build:main": "esbuild electron/main.ts --bundle --platform=node --format=cjs --external:electron --external:better-sqlite3 --external:bindings --outfile=dist-electron/main.cjs",
    "typecheck": "tsc --noEmit",
    "lint": "eslint .",
    "test": "vitest",
    "test:critical-fixes": "vitest tests/critical-fixes/",
    "e2e": "@playwright/test",
    "dist": "pnpm run build && electron-builder",
    "guard:cjs": "node -e \"const fs=require('fs');const path=require('path');let bad=[];function scan(d,p=''){if(['node_modules','dist','build','.vite','out','.git','release'].some(x=>d.includes(x)))return;for(const f of fs.readdirSync(d)){const fp=path.join(d,f);const rp=path.posix.join(p,f);if(fs.statSync(fp).isFile()&&(fp.endsWith('.js')||fp.endsWith('.ts'))&&!fp.endsWith('.json')){const c=fs.readFileSync(fp,'utf8');if(/\\brequire\\(|module\\.exports\\b|exports\\.(\\w+)\\b/.test(c))bad.push(rp)}else if(fs.statSync(fp).isDirectory())scan(fp,rp)}}scan('.');if(bad.length){console.error('❌ CommonJS patterns in source:',bad);process.exit(1)}console.log('✅ No CommonJS in source files');\"",
    "guard:pkgtype": "node -e \"const fs=require('fs');const path=require('path');let bad=[];function scan(d){if(d.includes('node_modules')) return; for(const f of fs.readdirSync(d)){const p=path.join(d,f);if(fs.statSync(p).isDirectory()){const pj=path.join(p,'package.json');if(fs.existsSync(pj)){const j=JSON.parse(fs.readFileSync(pj,'utf8'));if(j.type==='commonjs') bad.push(p)} scan(p)}}} scan('.'); if(bad.length){console.error('❌ commonjs packages:',bad);process.exit(1)} console.log('✅ type=module überall');\"",
    "guard:assets": "node scripts/guard-assets.cjs",
    "guard:native": "node scripts/validate-bindings.mjs && node scripts/validate-native-modules.mjs",
    "validate:electron-abi": "node scripts/validate-electron-abi.mjs",
    "validate:asar": "node scripts/validate-asar-unpack.mjs",
    "validate:critical-fixes": "node scripts/validate-critical-fixes.mjs",
    "validate:docs-structure": "node scripts/validate-documentation-structure.mjs",
    "validate:path-compliance": "node scripts/validate-path-compliance.mjs",
    "pre:dist:sanity": "pnpm guard:native && pnpm validate:asar && pnpm validate:electron-abi",
    "pre:release": "pnpm validate:critical-fixes && pnpm validate:docs-structure && pnpm validate:path-compliance && pnpm typecheck && pnpm lint && pnpm build",
    "safe:dist": "pnpm pre:release && pnpm dist",
    "safe:version": "pnpm validate:critical-fixes && pnpm version",
    "precommit": "pnpm typecheck && pnpm lint && pnpm guard:assets && pnpm guard:cjs && pnpm guard:pkgtype && pnpm guard:native && pnpm validate:asar && pnpm validate:electron-abi && pnpm validate:critical-fixes",
    "sync-version": "tsx scripts/sync-version.ts",
    "version:report": "tsx scripts/sync-version.ts report",
    "version:check": "tsx scripts/sync-version.ts scan",
    "test:github-cli": "pwsh -ExecutionPolicy Bypass -File scripts/test-github-cli.ps1 -ShowDetails",
    "test:update-ipc": "pwsh -ExecutionPolicy Bypass -File scripts/test-update-ipc.ps1 -ShowDetails",
    "test:update-manager": "pwsh -ExecutionPolicy Bypass -File scripts/test-update-manager.ps1 -ShowDetails",
    "test:update-e2e": "pwsh -ExecutionPolicy Bypass -File scripts/test-update-e2e.ps1 -ShowDetails",
    "test:update-all": "pnpm test:github-cli && pnpm test:update-ipc && pnpm test:update-manager && pnpm test:update-e2e"
  },
  "dependencies": {
    "@types/marked": "^6.0.0",
    "better-sqlite3": "12.4.1",
    "bindings": "^1.5.0",
    "dexie": "^4.2.0",
    "html2canvas": "^1.4.1",
    "jspdf": "^3.0.3",
    "jszip": "^3.10.1",
    "marked": "^16.3.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^7.9.3",
    "sql.js": "^1.13.0"
  },
  "devDependencies": {
    "@playwright/test": "^1.55.1",
    "@rollup/rollup-win32-x64-msvc": "^4.52.4",
    "@types/better-sqlite3": "^7.6.13",
    "@types/jszip": "^3.4.1",
    "@types/node": "^20.19.19",
    "@types/react": "^18.3.25",
    "@types/react-dom": "^18.3.7",
    "@typescript-eslint/eslint-plugin": "^8.45.0",
    "@typescript-eslint/parser": "^8.45.0",
    "@vitejs/plugin-react": "^5.0.4",
    "electron": "^31.7.7",
    "electron-builder": "^25.1.8",
    "electron-rebuild": "^3.2.9",
    "esbuild": "^0.25.10",
    "eslint": "^9.36.0",
    "glob": "^11.0.3",
    "minimatch": "^10.0.3",
    "node-abi": "^3.77.0",
    "npm-run-all": "^4.1.5",
    "prebuild-install": "^7.1.3",
    "tsx": "^4.20.6",
    "typescript": "^5.9.3",
    "vite": "^6.3.6",
    "vitest": "^2.1.9"
  }
}
