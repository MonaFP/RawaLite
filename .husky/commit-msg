#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

echo "üìù Validating commit message format..."

COMMIT_MSG_FILE=$1
COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")

# Check conventional commit format
if ! echo "$COMMIT_MSG" | grep -qE "^(feat|fix|docs|style|refactor|perf|test|chore)(\(.+\))?: .+"; then
  echo "‚ùå Commit message doesn't follow conventional format!"
  echo ""
  echo "Current message:"
  echo "  $COMMIT_MSG"
  echo ""
  echo "Expected format: type(scope): description"
  echo ""
  echo "Valid types:"
  echo "  feat     - new feature"
  echo "  fix      - bug fix"
  echo "  docs     - documentation changes"
  echo "  style    - formatting, missing semi colons, etc"
  echo "  refactor - code refactoring"
  echo "  perf     - performance improvements"
  echo "  test     - adding missing tests"
  echo "  chore    - maintenance tasks"
  echo ""
  echo "Valid scopes (optional):"
  echo "  customers, invoices, offers, packages, ui, db, electron"
  echo ""
  echo "Examples:"
  echo "  feat(customers): add email validation to customer form"
  echo "  fix(db): resolve SQLite transaction deadlock"
  echo "  docs(api): update persistence adapter documentation"
  echo "  refactor(hooks): extract common validation logic"
  echo ""
  exit 1
fi

# Check for breaking changes
if echo "$COMMIT_MSG" | grep -q "BREAKING CHANGE:"; then
  echo "‚ö†Ô∏è  Breaking change detected in commit message"
  echo "Make sure to:"
  echo "- Update version in package.json (major version bump)"
  echo "- Update CHANGELOG.md with migration guide"
  echo "- Update documentation with new APIs/usage"
fi

echo "‚úÖ Commit message format is valid!"