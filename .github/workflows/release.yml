name: Release

on:
  workflow_dispatch:
    inputs:
      bump:
        description: "Version bump type"
        required: true
        default: "patch"
        type: choice
        options: [patch, minor, major]
      notes:
        description: "Release notes (optional)"
        required: false
        type: string
  push:
    tags:
      - 'v*'

permissions:
  contents: write

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  REPO: MonaFP/RawaLite

jobs:
  prepare:
    # Nur bei manueller Auslösung (Version-Bump). Bei Tag-Push wird dieser Job übersprungen.
    if: ${{ github.event_name == 'workflow_dispatch' }}
    name: Bump Version, Tag, Push
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.setver.outputs.version }}
    steps:
      - name: Checkout (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node 20.18.0
        uses: actions/setup-node@v4
        with:
          node-version: 20.18.0

      - name: Setup pnpm 10.15.1
        uses: pnpm/action-setup@v2
        with:
          version: 10.15.1
          run_install: false

      - name: Install (frozen lockfile)
        run: pnpm install --frozen-lockfile

      - name: Compute and apply version bump
        id: setver
        shell: bash
        run: |
          set -euo pipefail
          bump="${{ github.event.inputs.bump }}"
          current=$(node -e "console.log(require('./package.json').version)")
          IFS='.' read -r MA MI PA <<< "$current"
          case "$bump" in
            patch) PA=$((PA+1));;
            minor) MI=$((MI+1)); PA=0;;
            major) MA=$((MA+1)); MI=0; PA=0;;
            *) echo "Invalid bump: $bump" && exit 1;;
          esac
          next="$MA.$MI.$PA"
          echo "Bumping version: $current -> $next"

          # 1) package.json aktualisieren
          node -e "let p=require('./package.json'); p.version='$next'; require('fs').writeFileSync('./package.json', JSON.stringify(p, null, 2)+'\n')"

          # 2) src/lib/VersionService.ts aktualisieren (BASE_VERSION, BUILD_DATE)
          if [ -f "src/lib/VersionService.ts" ]; then
            node -e "
              const fs=require('fs');
              const p='src/lib/VersionService.ts';
              let s=fs.readFileSync(p,'utf8');
              s=s.replace(/export\s+const\s+BASE_VERSION\s*=\s*['\"][^'\"]+['\"]/,'export const BASE_VERSION = \"${next}\"');
              const iso=new Date().toISOString();
              s=s.replace(/export\s+const\s+BUILD_DATE\s*=\s*['\"][^'\"]+['\"]/,'export const BUILD_DATE = \"'+iso+'\"');
              fs.writeFileSync(p,s);
            "
          else
            echo "WARN: src/lib/VersionService.ts nicht gefunden – Überspringe Code-Versionierung."
          fi

          # 3) Commit + Tag + Push
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json src/lib/VersionService.ts 2>/dev/null || true
          git commit -m "chore(release): v$next" || echo "No changes to commit"
          git tag "v$next" || true
          git push origin HEAD:main --tags

          echo "version=$next" >> $GITHUB_OUTPUT

      - name: Create GitHub Release (empty, assets to be uploaded later)
        if: ${{ steps.setver.outputs.version != '' }}
        run: |
          gh release create "v${{ steps.setver.outputs.version }}" \
            --title "RawaLite v${{ steps.setver.outputs.version }}" \
            --notes "${{ github.event.inputs.notes || 'Automated release' }}" \
            --repo "$REPO" || echo "Release already exists"

  build:
    name: Build & Upload Release (Windows)
    runs-on: windows-latest
    needs: [prepare]
    if: ${{ github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/v') }}
    steps:
      - name: Checkout (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Resolve VERSION
        id: resolvever
        shell: pwsh
        run: |
          if ("${{ github.event_name }}" -eq "workflow_dispatch") {
            $v = "${{ needs.prepare.outputs.version }}"
          } else {
            $ref = "${{ github.ref }}"
            $v = $ref -replace '^refs/tags/v',''
          }
          if (-not $v) { Write-Error "VERSION not determined"; exit 1 }
          echo "VERSION=$v" >> $env:GITHUB_OUTPUT
          Write-Host "Resolved VERSION: $v"

      - name: Setup Node 20.18.0
        uses: actions/setup-node@v4
        with:
          node-version: 20.18.0

      - name: Setup pnpm 10.15.1
        uses: pnpm/action-setup@v2
        with:
          version: 10.15.1
          run_install: false

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\pnpm\store
          key: ${{ runner.os }}-pnpmstore-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpmstore-

      - name: CLEAN caches before build (prevent >300MB exe)
        shell: pwsh
        run: |
          Remove-Item -Recurse -Force .\dist, .\release, .\node_modules\.vite, .\node_modules\.cache -ErrorAction SilentlyContinue
          Remove-Item -Recurse -Force "$env:APPDATA\electron-builder" -ErrorAction SilentlyContinue

      - name: Install (frozen lockfile)
        run: pnpm install --frozen-lockfile

      - name: Build renderer/main/preload
        run: pnpm build

      - name: Package app (NO publish)
        run: pnpm dist

      - name: Guard release assets
        run: pnpm guard:release:assets

      - name: Assert installer size < 300MB
        shell: pwsh
        run: |
          $exe = Get-ChildItem -Recurse -File dist | Where-Object { $_.Name -match '^rawalite-Setup-.*\.exe$' } | Select-Object -First 1
          if (-not $exe) { Write-Error "Setup EXE not found in dist (rawalite-Setup-*.exe)"; exit 1 }
          $sizeMB = [math]::Round($exe.Length/1MB,2)
          Write-Host "Installer size: $sizeMB MB"
          if ($sizeMB -ge 300) { Write-Error "Installer too large ($sizeMB MB >= 300 MB)"; exit 1 }

      - name: Check latest.yml has sha512
        shell: pwsh
        run: |
          $latest = Get-ChildItem -Recurse -File dist | Where-Object { $_.Name -eq 'latest.yml' } | Select-Object -First 1
          if (-not $latest) { Write-Error "latest.yml nicht gefunden"; exit 1 }
          $hasSha = Select-String -Path $latest.FullName -Pattern 'sha512:\s*[A-Za-z0-9+/=]+'
          if (-not $hasSha) { Write-Error "sha512 fehlt in latest.yml"; exit 1 }
          Write-Host "latest.yml OK (sha512 vorhanden)"

      - name: (Optional) Check builder-effective-config
        shell: pwsh
        run: |
          $cfg = Get-ChildItem -Recurse -File | Where-Object { $_.Name -eq 'builder-effective-config.yaml' } | Select-Object -First 1
          if ($cfg) {
            $content = Get-Content $cfg.FullName -Raw
            if ($content -notmatch 'appId:\s*com\.rawalite\.app') { Write-Error "appId mismatch in builder-effective-config.yaml (erwartet: com.rawalite.app)"; exit 1 }
            if ($content -match 'nsis:' -and $content -notmatch 'perMachine:\s*false') { Write-Error "nsis.perMachine muss false sein"; exit 1 }
            Write-Host "builder-effective-config.yaml OK"
          } else {
            Write-Host "builder-effective-config.yaml nicht gefunden (übersprungen)"
          }

      - name: Upload artifacts (dist)
        uses: actions/upload-artifact@v4
        with:
          name: dist-windows
          path: dist

      - name: Create or update GitHub Release
        shell: pwsh
        env:
          VERSION: ${{ steps.resolvever.outputs.VERSION }}
        run: |
          $tag = "v$env:VERSION"
          $title = "RawaLite $tag"
          gh release view $tag --repo "$env:REPO" 2>$null
          if ($LASTEXITCODE -ne 0) {
            gh release create $tag --title $title --notes "Automated release" --repo "$env:REPO"
          } else {
            Write-Host "Release $tag already exists - will upload assets"
          }

      - name: Upload assets via gh
        shell: pwsh
        env:
          VERSION: ${{ steps.resolvever.outputs.VERSION }}
        run: |
          $exe      = Get-ChildItem -Recurse -File dist | Where-Object { $_.Name -match '^rawalite-Setup-.*\.exe$' } | Select-Object -First 1
          $blockmap = Get-ChildItem -Recurse -File dist | Where-Object { $_.Name -match '\.blockmap$' } | Select-Object -First 1
          $latest   = Get-ChildItem -Recurse -File dist | Where-Object { $_.Name -eq 'latest.yml' } | Select-Object -First 1
          $update   = Get-ChildItem -Recurse -File dist | Where-Object { $_.Name -eq 'update.json' } | Select-Object -First 1
          if (-not $exe)    { Write-Error "Setup EXE not found (rawalite-Setup-*.exe)"; exit 1 }
          if (-not $blockmap) { Write-Error "Blockmap not found"; exit 1 }
          if (-not $latest) { Write-Error "latest.yml not found"; exit 1 }
          if (-not $update) { Write-Error "update.json not found"; exit 1 }
          $tag = "v$env:VERSION"
          gh release upload $tag `
            "$($exe.FullName)" "$($blockmap.FullName)" "$($latest.FullName)" "$($update.FullName)" `
            --clobber --repo "$env:REPO"
          Write-Host "DONE | ver=$env:VERSION | exe=$([math]::Round($exe.Length/1MB,2)) MB"
