#!/usr/bin/env node

/**
 * 🔧 SETUP GIT HOOKS SCRIPT
 * 
 * Installs pre-commit validation hooks for RawaLite development
 * 
 * Usage:
 *   node scripts/setup-git-hooks.js
 *   pnpm setup:hooks
 */

import { writeFileSync, chmodSync, existsSync, mkdirSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

console.log('🔧 RawaLite Git Hooks Setup');
console.log('===========================');

try {
  // Ensure .git/hooks directory exists
  const gitHooksDir = join(__dirname, '..', '.git', 'hooks');
  if (!existsSync(gitHooksDir)) {
    mkdirSync(gitHooksDir, { recursive: true });
    console.log('📁 Created .git/hooks directory');
  }

  // Pre-commit hook content
  const preCommitHook = `#!/bin/sh
# RawaLite pre-commit validation hook
# Auto-generated by scripts/setup-git-hooks.js

echo "🔍 Running RawaLite pre-commit validation..."

# Check if package.json version changed (indicates version bump)
if git diff --cached --name-only | grep -q "package.json"; then
  echo "✅ package.json version update detected"
  
  # Run comprehensive validation for version bumps
  echo "🔍 Running version bump validation..."
  
  # Critical fixes validation (MANDATORY)
  if ! pnpm validate:critical-fixes; then
    echo "❌ COMMIT BLOCKED: Critical fixes validation failed!"
    echo "📋 Required actions:"
    echo "  1. Check docs/00-meta/final/CRITICAL-FIXES-REGISTRY.md"
    echo "  2. Restore missing critical patterns"
    echo "  3. Run: pnpm validate:critical-fixes"
    echo "  4. Try commit again"
    exit 1
  fi
  
  # Migration validation (MANDATORY)
  if ! pnpm validate:migrations; then
    echo "❌ COMMIT BLOCKED: Migration index validation failed!"
    echo "📋 Required actions:"
    echo "  1. Check src/main/db/migrations/index.ts"
    echo "  2. Ensure all migrations are indexed"
    echo "  3. Run: pnpm validate:migrations"
    echo "  4. Try commit again"
    exit 1
  fi
  
  echo "✅ Version bump validation passed"
fi

# Standard validation for all commits
echo "🔍 Running standard pre-commit checks..."

# TypeScript validation
if ! pnpm typecheck; then
  echo "❌ COMMIT BLOCKED: TypeScript validation failed!"
  echo "📋 Fix TypeScript errors and try again"
  exit 1
fi

# ESLint validation
if ! pnpm lint; then
  echo "❌ COMMIT BLOCKED: ESLint validation failed!"
  echo "📋 Fix linting errors and try again"
  exit 1
fi

# Asset validation
if ! pnpm guard:assets; then
  echo "❌ COMMIT BLOCKED: Asset validation failed!"
  exit 1
fi

# Native module validation
if ! pnpm guard:native; then
  echo "❌ COMMIT BLOCKED: Native module validation failed!"
  exit 1
fi

# Electron ABI validation
if ! pnpm validate:electron-abi; then
  echo "❌ COMMIT BLOCKED: Electron ABI validation failed!"
  exit 1
fi

echo "✅ All pre-commit validations passed"
echo "🎉 Commit allowed to proceed"
`;

  // Write pre-commit hook
  const preCommitPath = join(gitHooksDir, 'pre-commit');
  writeFileSync(preCommitPath, preCommitHook, 'utf8');
  
  // Make executable (Unix-style permissions)
  try {
    chmodSync(preCommitPath, 0o755);
    console.log('✅ Pre-commit hook installed and made executable');
  } catch (error) {
    console.log('✅ Pre-commit hook installed (permissions may need manual adjustment on Windows)');
  }

  console.log('');
  console.log('🎯 Git hooks setup complete!');
  console.log('');
  console.log('📋 What was installed:');
  console.log('   - Pre-commit validation hook');
  console.log('   - Critical fixes validation');
  console.log('   - Migration index validation');
  console.log('   - TypeScript/ESLint checks');
  console.log('   - Asset/Native module validation');
  console.log('');
  console.log('🔧 Usage:');
  console.log('   - Hooks run automatically on git commit');
  console.log('   - Version bump commits get extra validation');
  console.log('   - Failed validation blocks commit');
  console.log('');
  console.log('🚀 Ready for development with automated quality checks!');

} catch (error) {
  console.error('❌ Git hooks setup failed:', error.message);
  console.error('');
  console.error('🔧 Manual setup may be required:');
  console.error('   1. Check .git/hooks directory exists');
  console.error('   2. Ensure write permissions');
  console.error('   3. Check Git installation');
  process.exit(1);
}