# 🚀 RawaLite Custom Updater Implementation Guide

## Overview

The RawaLite Custom Updater is a UAC-resistant, PowerShell-based update system that replaces electron-updater. It provides reliable updates for both per-user and per-machine installations on Windows.

## Architecture

```
┌─────────────────────────────────────────────────────┐
│                   Renderer Process                   │
│  ┌─────────────────────────────────────────────┐   │
│  │  Update UI (AutoUpdaterModal)               │   │
│  │  - Check for updates                        │   │
│  │  - Download progress                        │   │
│  │  - Install confirmation                     │   │
│  └────────────┬────────────────────────────────┘   │
│               │ IPC via window.rawalite.updater     │
└───────────────┼─────────────────────────────────────┘
                │
┌───────────────▼─────────────────────────────────────┐
│                    Main Process                      │
│  ┌─────────────────────────────────────────────┐   │
│  │  Custom Updater (main.ts)                   │   │
│  │  - GitHub API integration                   │   │
│  │  - Download management                      │   │
│  │  - PowerShell launcher execution            │   │
│  └────────────┬────────────────────────────────┘   │
│               │ Spawns detached process              │
└───────────────┼─────────────────────────────────────┘
                │
┌───────────────▼─────────────────────────────────────┐
│           PowerShell Launcher Script                 │
│  ┌─────────────────────────────────────────────┐   │
│  │  update-launcher.ps1                        │   │
│  │  - Checks installation location             │   │
│  │  - Handles UAC elevation if needed          │   │
│  │  - Runs NSIS installer                      │   │
│  │  - Saves installation results               │   │
│  └─────────────────────────────────────────────┘   │
└──────────────────────────────────────────────────────┘
```

## File Structure

```
RawaLite/
├── electron/
│   ├── main.ts          # Main process with custom updater
│   └── preload.ts       # IPC bridge for renderer
├── src/
│   ├── types/
│   │   └── updater.d.ts # TypeScript definitions
│   ├── services/
│   │   └── semver.js    # Version comparison utilities
│   └── global.d.ts      # Window API types
├── resources/
│   └── update-launcher.ps1  # PowerShell launcher script
├── scripts/
│   └── generate-update-json.mjs  # Update manifest generator
└── electron-builder.yml  # Build configuration
```

## Implementation Steps

### 1. Build the Application

```bash
# Install dependencies
pnpm install

# Build the application
pnpm build

# Create installer
pnpm dist
```

### 2. Generate Update Manifest

After building, generate the update manifest:

```bash
pnpm generate:update-json
```

This creates `release/update.json` with:
- Version information
- Download URL
- SHA512 hash
- File size

### 3. Create GitHub Release

```bash
# Tag the version
git tag v1.8.101
git push origin v1.8.101

# Create release on GitHub
gh release create v1.8.101 \
  --title "RawaLite v1.8.101" \
  --notes-file RELEASE_NOTES.md \
  release/rawalite-Setup-1.8.101.exe \
  release/update.json
```

### 4. Update Flow

1. **Check for Updates**
   - App calls `window.rawalite.updater.check()`
   - Main process fetches `update.json` from GitHub
   - Compares versions using semver

2. **Download Update**
   - App calls `window.rawalite.updater.download()`
   - Downloads installer to `%LOCALAPPDATA%\rawalite-updater\pending`
   - Verifies SHA512 hash
   - Reports progress to UI

3. **Install Update**
   - App calls `window.rawalite.updater.install()`
   - Extracts PowerShell launcher to temp
   - Spawns detached PowerShell process
   - Launcher handles UAC if needed
   - Installer runs silently
   - Results saved to JSON file

4. **Post-Installation**
   - App can check results via `window.rawalite.updater.checkResults()`
   - User prompted to restart
   - New version loads after restart

## Configuration

### electron-builder.yml

Key settings for updater compatibility:

```yaml
nsis:
  oneClick: false              # Allow installation choices
  perMachine: false            # Default to per-user
  allowElevation: true         # Allow UAC elevation
  packElevateHelper: true      # Include elevation helper
  artifactName: rawalite-Setup-${version}.exe
```

### Update Manifest Schema

```json
{
  "product": "RawaLite",
  "channel": "stable",
  "version": "1.8.101",
  "releasedAt": "2025-01-01T00:00:00Z",
  "notes": "Release notes here",
  "files": [{
    "kind": "nsis",
    "arch": "x64",
    "name": "rawalite-Setup-1.8.101.exe",
    "size": 123456789,
    "sha512": "base64-encoded-hash",
    "url": "https://github.com/..."
  }]
}
```

## UI Integration

### React Component Example

```tsx
import { useState, useEffect } from 'react';

function UpdateManager() {
  const [updateStatus, setUpdateStatus] = useState('idle');
  const [progress, setProgress] = useState(0);
  
  useEffect(() => {
    // Listen for progress updates
    const unsubscribe = window.rawalite.updater.onProgress((p) => {
      setProgress(p.percent);
    });
    
    return unsubscribe;
  }, []);
  
  const checkForUpdates = async () => {
    setUpdateStatus('checking');
    const result = await window.rawalite.updater.check();
    
    if (result.ok && result.hasUpdate) {
      setUpdateStatus('available');
    } else {
      setUpdateStatus('up-to-date');
    }
  };
  
  const downloadUpdate = async () => {
    setUpdateStatus('downloading');
    await window.rawalite.updater.download();
    setUpdateStatus('ready');
  };
  
  const installUpdate = async () => {
    const result = await window.rawalite.updater.install();
    if (result.ok) {
      setUpdateStatus('installing');
      // App will close automatically
    }
  };
  
  // Render UI based on updateStatus
  // ...
}
```

## Troubleshooting

### Common Issues

1. **UAC Dialog Doesn't Appear**
   - Check if app is already running as admin
   - Verify PowerShell execution policy
   - Check Windows UAC settings

2. **Installation Fails Silently**
   - Check logs at `%LOCALAPPDATA%\rawalite-updater\launcher-*.log`
   - Verify installer signature
   - Check available disk space

3. **Version Not Updating**
   - Ensure `package.json` version is incremented
   - Rebuild with `pnpm build:clean`
   - Clear update cache in `%LOCALAPPDATA%\rawalite-updater`

### Debug Mode

Enable debug logging in main.ts:

```javascript
log.transports.file.level = "debug";
log.transports.console.level = "debug";
```

View logs at:
- Windows: `%APPDATA%\RawaLite\logs\main.log`
- PowerShell: `%LOCALAPPDATA%\rawalite-updater\launcher-*.log`

## Security Considerations

1. **Code Signing**
   - Sign installer with EV certificate for SmartScreen
   - Include certificate in `electron-builder.yml`

2. **Hash Verification**
   - Always verify SHA512 before installation
   - Reject downloads with hash mismatch

3. **HTTPS Only**
   - Use GitHub releases with HTTPS URLs
   - Never download over HTTP

4. **PowerShell Execution**
   - Script runs with `-ExecutionPolicy Bypass` (limited scope)
   - Unblocks downloaded files (removes MOTW)

## Testing

### Local Testing

1. Build version 1.8.100
2. Install and run
3. Build version 1.8.101
4. Host update.json locally
5. Test update flow

### Production Testing

1. Create pre-release on GitHub
2. Test with small user group
3. Monitor error logs
4. Promote to full release

## Migration from electron-updater

1. Remove electron-updater dependencies
2. Remove autoUpdater event listeners
3. Implement custom updater handlers
4. Update UI to use new API
5. Test thoroughly before release

## Support

For issues or questions:
- Check logs in `%APPDATA%\RawaLite\logs`
- Review launcher logs in `%LOCALAPPDATA%\rawalite-updater`
- Open issue on GitHub with logs attached