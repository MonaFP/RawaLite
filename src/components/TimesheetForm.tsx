import React, { useState, useEffect } from 'react';
import type { Timesheet, TimesheetActivity, Customer, Activity } from '../persistence/adapter';
import { useActivities } from '../hooks/useActivities';

interface TimesheetFormProps {
  timesheet?: Timesheet;
  customers: Customer[];
  onSave: (timesheet: Omit<Timesheet, 'id' | 'createdAt' | 'updatedAt'>) => void;
  onCancel: () => void;
}

export const TimesheetForm: React.FC<TimesheetFormProps> = ({
  timesheet,
  customers,
  onSave,
  onCancel
}) => {
  const { activities: availableActivities } = useActivities();
  
  // Form state
  const [customerId, setCustomerId] = useState(timesheet?.customerId?.toString() || '');
  const [title, setTitle] = useState(timesheet?.title || '');
  const [startDate, setStartDate] = useState(
    timesheet?.startDate ? new Date(timesheet.startDate).toISOString().split('T')[0] : ''
  );
  const [endDate, setEndDate] = useState(
    timesheet?.endDate ? new Date(timesheet.endDate).toISOString().split('T')[0] : ''
  );
  const [notes, setNotes] = useState(timesheet?.notes || '');
  const [activities, setActivities] = useState<TimesheetActivity[]>(timesheet?.activities || []);
  const [vatRate, setVatRate] = useState(timesheet?.vatRate || 19);

  // Automatische Berechnung der Summen
  const subtotal = activities.reduce((sum, activity) => sum + activity.total, 0);
  const vatAmount = subtotal * (vatRate / 100);
  const total = subtotal + vatAmount;

  const addActivity = () => {
    const newActivity: TimesheetActivity = {
      id: Date.now(), // Temporary ID
      timesheetId: 0, // Will be set when saving
      activityId: undefined,
      title: '',
      description: '',
      date: new Date().toISOString().split('T')[0],
      startTime: '09:00',
      endTime: '10:00',
      hours: 1,
      hourlyRate: 0,
      total: 0,
      isBreak: false
    };
    setActivities([...activities, newActivity]);
  };

  const updateActivity = (index: number, field: keyof TimesheetActivity, value: any) => {
    const updatedActivities = activities.map((activity, i) => {
      if (i !== index) return activity;

      const updatedActivity = { ...activity, [field]: value };

      // Auto-fill from selected activity template
      if (field === 'activityId' && value) {
        const selectedActivity = availableActivities.find(a => a.id === parseInt(value));
        if (selectedActivity) {
          updatedActivity.title = selectedActivity.title;
          updatedActivity.hourlyRate = selectedActivity.hourlyRate;
        }
      }

      // Recalculate hours from time range
      if (field === 'startTime' || field === 'endTime') {
        const hours = calculateHours(updatedActivity.startTime, updatedActivity.endTime);
        updatedActivity.hours = hours;
      }

      // Recalculate total when hours or rate changes
      if (field === 'hours' || field === 'hourlyRate' || field === 'startTime' || field === 'endTime') {
        updatedActivity.total = updatedActivity.hours * updatedActivity.hourlyRate;
      }

      return updatedActivity;
    });

    setActivities(updatedActivities);
  };

  const removeActivity = (index: number) => {
    setActivities(activities.filter((_, i) => i !== index));
  };

  const calculateHours = (startTime: string, endTime: string): number => {
    if (!startTime || !endTime) return 0;
    
    const [startHour, startMin] = startTime.split(':').map(Number);
    const [endHour, endMin] = endTime.split(':').map(Number);
    
    const startMinutes = startHour * 60 + startMin;
    const endMinutes = endHour * 60 + endMin;
    
    let diffMinutes = endMinutes - startMinutes;
    if (diffMinutes < 0) diffMinutes += 24 * 60; // Handle overnight
    
    return diffMinutes / 60;
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!customerId || !title || !startDate || !endDate) {
      alert('Bitte füllen Sie alle Pflichtfelder aus.');
      return;
    }

    const timesheetData: Omit<Timesheet, 'id' | 'createdAt' | 'updatedAt'> = {
      timesheetNumber: timesheet?.timesheetNumber || '', // Will be generated by hook
      customerId: parseInt(customerId),
      title,
      status: timesheet?.status || 'draft',
      startDate,
      endDate,
      subtotal,
      vatRate,
      vatAmount,
      total,
      notes,
      activities: activities.map(activity => ({
        ...activity,
        id: 0, // Will be set by database
        timesheetId: 0 // Will be set by database
      })),
      sentAt: timesheet?.sentAt,
      acceptedAt: timesheet?.acceptedAt,
      rejectedAt: timesheet?.rejectedAt
    };

    onSave(timesheetData);
  };

  return (
    <div className="invoice-form">
      <h2>{timesheet ? 'Leistungsnachweis bearbeiten' : 'Neuer Leistungsnachweis'}</h2>
      
      <form onSubmit={handleSubmit}>
        {/* Grunddaten */}
        <div className="form-section">
          <h3>Grunddaten</h3>
          
          <div className="form-group">
            <label htmlFor="customer">Kunde *</label>
            <select
              id="customer"
              value={customerId}
              onChange={(e) => setCustomerId(e.target.value)}
              required
            >
              <option value="">Kunde auswählen</option>
              {customers.map(customer => (
                <option key={customer.id} value={customer.id}>
                  {customer.name}
                </option>
              ))}
            </select>
          </div>

          <div className="form-group">
            <label htmlFor="title">Titel *</label>
            <input
              type="text"
              id="title"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              required
            />
          </div>

          <div className="form-row">
            <div className="form-group">
              <label htmlFor="startDate">Von *</label>
              <input
                type="date"
                id="startDate"
                value={startDate}
                onChange={(e) => setStartDate(e.target.value)}
                required
              />
            </div>
            
            <div className="form-group">
              <label htmlFor="endDate">Bis *</label>
              <input
                type="date"
                id="endDate"
                value={endDate}
                onChange={(e) => setEndDate(e.target.value)}
                required
              />
            </div>
          </div>
        </div>

        {/* Tätigkeiten */}
        <div className="form-section">
          <div className="section-header">
            <h3>Tätigkeiten</h3>
            <button type="button" onClick={addActivity} className="btn btn-secondary">
              + Tätigkeit hinzufügen
            </button>
          </div>

          {activities.map((activity, index) => (
            <div key={activity.id} className="line-item">
              <div className="form-row">
                <div className="form-group">
                  <label>Vorlage</label>
                  <select
                    value={activity.activityId || ''}
                    onChange={(e) => updateActivity(index, 'activityId', e.target.value ? parseInt(e.target.value) : undefined)}
                  >
                    <option value="">Benutzerdefiniert</option>
                    {availableActivities.map(template => (
                      <option key={template.id} value={template.id}>
                        {template.title} (€{template.hourlyRate}/h)
                      </option>
                    ))}
                  </select>
                </div>

                <div className="form-group">
                  <label>Titel *</label>
                  <input
                    type="text"
                    value={activity.title}
                    onChange={(e) => updateActivity(index, 'title', e.target.value)}
                    required
                  />
                </div>

                <div className="form-group">
                  <label>Datum</label>
                  <input
                    type="date"
                    value={activity.date}
                    onChange={(e) => updateActivity(index, 'date', e.target.value)}
                  />
                </div>
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label>Von</label>
                  <input
                    type="time"
                    value={activity.startTime}
                    onChange={(e) => updateActivity(index, 'startTime', e.target.value)}
                  />
                </div>

                <div className="form-group">
                  <label>Bis</label>
                  <input
                    type="time"
                    value={activity.endTime}
                    onChange={(e) => updateActivity(index, 'endTime', e.target.value)}
                  />
                </div>

                <div className="form-group">
                  <label>Stunden</label>
                  <input
                    type="number"
                    step="0.25"
                    min="0"
                    value={activity.hours}
                    onChange={(e) => updateActivity(index, 'hours', parseFloat(e.target.value) || 0)}
                  />
                </div>

                <div className="form-group">
                  <label>Stundensatz (€)</label>
                  <input
                    type="number"
                    step="0.01"
                    min="0"
                    value={activity.hourlyRate}
                    onChange={(e) => updateActivity(index, 'hourlyRate', parseFloat(e.target.value) || 0)}
                  />
                </div>

                <div className="form-group">
                  <label>Gesamt (€)</label>
                  <input
                    type="text"
                    value={activity.total.toFixed(2)}
                    readOnly
                    className="readonly"
                  />
                </div>

                <div className="form-group">
                  <button
                    type="button"
                    onClick={() => removeActivity(index)}
                    className="btn btn-danger btn-small"
                  >
                    ×
                  </button>
                </div>
              </div>

              {activity.description && (
                <div className="form-group">
                  <label>Beschreibung</label>
                  <textarea
                    value={activity.description}
                    onChange={(e) => updateActivity(index, 'description', e.target.value)}
                    rows={2}
                  />
                </div>
              )}
            </div>
          ))}
        </div>

        {/* Summen */}
        <div className="form-section">
          <h3>Summen</h3>
          
          <div className="totals">
            <div className="total-row">
              <span>Zwischensumme:</span>
              <span>€{subtotal.toFixed(2)}</span>
            </div>
            
            <div className="form-group inline">
              <label>MwSt. (%):</label>
              <input
                type="number"
                value={vatRate}
                onChange={(e) => setVatRate(parseFloat(e.target.value) || 0)}
                min="0"
                max="50"
                step="0.1"
                style={{ width: '80px' }}
              />
              <span>€{vatAmount.toFixed(2)}</span>
            </div>
            
            <div className="total-row final">
              <span>Gesamtsumme:</span>
              <span>€{total.toFixed(2)}</span>
            </div>
          </div>
        </div>

        {/* Notizen */}
        <div className="form-section">
          <div className="form-group">
            <label htmlFor="notes">Notizen</label>
            <textarea
              id="notes"
              value={notes}
              onChange={(e) => setNotes(e.target.value)}
              rows={3}
            />
          </div>
        </div>

        {/* Buttons */}
        <div className="form-actions">
          <button type="button" onClick={onCancel} className="btn btn-secondary">
            Abbrechen
          </button>
          <button type="submit" className="btn btn-primary">
            {timesheet ? 'Aktualisieren' : 'Erstellen'}
          </button>
        </div>
      </form>
    </div>
  );
};